(defvar bootstrap-version)
(let ((bootstrap-file
       (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
      (bootstrap-version 5))
  (unless (file-exists-p bootstrap-file)
    (with-current-buffer
        (url-retrieve-synchronously
         "https://raw.githubusercontent.com/raxod502/straight.el/develop/install.el"
         'silent 'inhibit-cookies)
      (goto-char (point-max))
      (eval-print-last-sexp)))
  (load bootstrap-file nil 'nomessage))

(add-to-list 'load-path "~/.emacs.d/elisp-assorted/")

(straight-use-package 'org-ref)
(straight-use-package 'org-appear)
(straight-use-package 'org-present)
(straight-use-package 'use-package)
(straight-use-package 'ivy-bibtex)
(straight-use-package 'helm)
(straight-use-package 'helm-bibtex)
(straight-use-package 'auctex)
(straight-use-package 'haskell-mode)
(straight-use-package 'tidal)
(straight-use-package 'company)
(straight-use-package 'flycheck)
(straight-use-package 'elpy)
(straight-use-package 'visual-fill-column)
(straight-use-package 'magit)



(global-set-key (kbd "M-x") #'helm-M-x)
(global-set-key (kbd "C-x r b") #'helm-filtered-bookmarks)
(global-set-key (kbd "C-x C-f") #'helm-find-files)
(global-set-key (kbd "M-z") 'shell-command)
(global-set-key	(kbd "C-z") 'shell)
(global-set-key (kbd "C-c l") 'org-store-link)
(global-set-key (kbd "C-c a") 'org-agenda)
(global-set-key (kbd "C-c c") 'org-capture)

(helm-mode 1)

(elpy-enable)

;; Enable Flycheck
(when (require 'flycheck nil t)
(setq elpy-modules (delq 'elpy-module-flymake elpy-modules))
(add-hook 'elpy-mode-hook 'flycheck-mode))


;; add hooks to modes
(add-hook 'org-mode-hook 'flyspell-mode)
(add-hook 'org-mode-hook 'company-mode)
(add-hook 'org-mode-hook 'org-indent-mode)
(add-hook 'org-mode-hook 'org-appear-mode)

(add-hook 'python-mode-hook 'electric-pair-local-mode)
(add-hook 'python-mode-hook 'company-mode)
(add-hook 'python-mode-hook 'display-line-numbers-mode)
(add-hook 'python-mode-hook 'flycheck-mode)

(add-hook 'emacs-lisp-mode-hook 'company-mode)
(add-hook 'emacs-lisp-mode-hook 'display-line-numbers-mode)

(add-hook 'ConTeXt-mode-hook 'company-mode)
(add-hook 'ConTeXt-mode-hook 'display-line-numbers-mode)

(add-hook 'LaTeX-mode-hook 'company-mode)
(add-hook 'LaTeX-mode-hook 'display-line-numbers-mode)

(add-hook 'html-mode-hook 'company-mode)
(add-hook 'html-mode-hook 'display-line-numbers-mode)
(add-hook 'html-mode-hook 'electric-pair-local-mode)

(add-hook 'css-mode-hook 'company-mode)
(add-hook 'css-mode-hook 'display-line-numbers-mode)
(add-hook 'css-mode-hook 'electric-pair-local-mode)


(when (fboundp 'windmove-default-keybindings)
  (windmove-default-keybindings))

;; Make windmove work in Org mode:
(add-hook 'org-shiftup-final-hook 'windmove-up)
(add-hook 'org-shiftleft-final-hook 'windmove-left)
(add-hook 'org-shiftdown-final-hook 'windmove-down)
(add-hook 'org-shiftright-final-hook 'windmove-right)

;; tempo

(require 'tempo)
(require 'org-tempo)

(require 'calendar)
  (defun insdate-insert-current-date (&optional omit-day-of-week-p)
    "Insert today's date using the current locale.
  With a prefix argument, the date is inserted without the day of
  the week."
    (interactive "P*")
    (insert (calendar-date-string (calendar-current-date) nil
				  omit-day-of-week-p)))

(setq tempo-interactive t)
(tempo-define-template "org-headers"
		       '("#+DATE: " (insdate-insert-current-date) n
			 "#+AUTHOR: " (p "Author: " author) n
			 "#+TITLE: " (p "Title: " title) n
			 "#+SUBTITLE: " (p "Subtitle: " subtitle) n)
		       "org-headers"
		       "Insert org headers")
			 
;; org-ref
(use-package helm-bibtex
  :init
  (setq bibtex-completion-bibliography '("~/Bibliography/master.bib")
	bibtex-completion-library-path '("~/Bibliography/bibtex-pdfs/")
	bibtex-completion-notes-path "~/Bibliography/notes/"
	bibtex-completion-notes-template-multiple-files "* ${author-or-editor}, ${title}, ${journal}, (${year}) :${=type=}: \n\nSee [[cite:&${=key=}]]\n"
	bibtex-completion-additional-search-fields '(keywords)
	bibtex-completion-display-formats
	'((article       . "${=has-pdf=:1}${=has-note=:1} ${year:4} ${author:36} ${title:*} ${journal:40}")
	  (inbook        . "${=has-pdf=:1}${=has-note=:1} ${year:4} ${author:36} ${title:*} Chapter ${chapter:32}")
	  (incollection  . "${=has-pdf=:1}${=has-note=:1} ${year:4} ${author:36} ${title:*} ${booktitle:40}")
	  (inproceedings . "${=has-pdf=:1}${=has-note=:1} ${year:4} ${author:36} ${title:*} ${booktitle:40}")
	  (t             . "${=has-pdf=:1}${=has-note=:1} ${year:4} ${author:36} ${title:*}"))
	bibtex-completion-pdf-open-function
	(lambda (fpath)
	  (call-process "open" nil 0 nil fpath))))

(use-package org-ref
  :ensure nil
;;  :load-path (lambda () (expand-file-name "org-ref" scimax-dir))
  :init
;;  (add-to-list 'load-path
;;	       (expand-file-name "org-ref" scimax-dir))
  (require 'bibtex)
  (setq bibtex-autokey-year-length 4
	bibtex-autokey-name-year-separator "-"
	bibtex-autokey-year-title-separator "-"
	bibtex-autokey-titleword-separator "-"
	bibtex-autokey-titlewords 2
	bibtex-autokey-titlewords-stretch 1
	bibtex-autokey-titleword-length 5)
  (define-key bibtex-mode-map (kbd "H-b") 'org-ref-bibtex-hydra/body)
  (define-key org-mode-map (kbd "C-c ]") 'org-ref-cite-insert-helm)
  (define-key org-mode-map (kbd "s-[") 'org-ref-insert-link-hydra/body)
;;  (define-key org-mode-map (kbd "C-M-i") 'pcomplete-list)
  (require 'org-ref-helm)
  (require 'org-ref-arxiv)
  (require 'org-ref-scopus)
  (require 'org-ref-wos))

(use-package org-ref-helm
  :ensure nil
;;  :load-path (lambda () (expand-file-name "org-ref" scimax-dir))
  :init (setq org-ref-insert-link-function 'org-ref-insert-link-hydra/body
	      org-ref-insert-cite-function 'org-ref-cite-insert-helm
	      org-ref-insert-label-function 'org-ref-insert-label-link
	      org-ref-insert-ref-function 'org-ref-insert-ref-link
	      org-ref-cite-onclick-function (lambda (_) (org-ref-citation-hydra/body))))

;; org present


;; Configure fill width
(setq visual-fill-column-width 110
      visual-fill-column-center-text t)

(defun my/org-present-prepare-slide (buffer-name heading)
  ;; Show only top-level headlines
  (org-overview)

  ;; Unfold the current entry
  (org-show-entry)

  ;; Show only direct subheadings of the slide but don't expand them
  (org-show-children))

(defun my/org-present-start ()
  ;; Center the presentation and wrap lines
  (visual-fill-column-mode 1)
  ;; Tweak font sizes
  (setq-local face-remapping-alist '((default (:height 1.5) variable-pitch)
                                     (header-line (:height 4.0) variable-pitch)
                                     (org-document-title (:height 1.75) org-document-title)
                                     (org-code (:height 1.55) org-code)
                                     (org-verbatim (:height 1.55) org-verbatim)
                                     (org-block (:height 1.25) org-block)
                                     (org-block-begin-line (:height 0.7) org-block)))
  (menu-bar-mode 0)
  (setq header-line-format " ")
  (org-display-inline-images))

(defun my/org-present-end ()

  ;; Reset font customizations
  (setq-local face-remapping-alist '((default fixed-pitch default)))

  ;; Stop centering the document
  (visual-fill-column-mode 0)
  (visual-line-mode 0)

  (menu-bar-mode t)
  (org-remove-inline-images)
  (setq header-line-format nil))

;; Register hooks with org-present
(add-hook 'org-present-mode-hook 'my/org-present-start)
(add-hook 'org-present-mode-quit-hook 'my/org-present-end)
(add-hook 'org-present-after-navigate-functions 'my/org-present-prepare-slide)

;; ;; transparency

(set-frame-parameter (selected-frame) 'alpha '(95 . 100))
(add-to-list 'default-frame-alist '(alpha . (90 . 90)))

;; org publishing
;; https://emacs.stackexchange.com/questions/70491/how-to-use-org-ref-export-to-html-in-org-publish-project
;; Very simplified version of org-ref-export-to from org-ref-export.el
;; that export to filename
(defun org-ref-export-to-file-nomarks-noopen
    (backend filename &optional async subtreep visible-only body-only info)  
    (org-export-with-buffer-copy
     (org-export-expand-include-keyword)
     (org-ref-process-buffer backend subtreep)
     (org-export-to-file backend filename
             async subtreep visible-only
             body-only info)
     ))

;; org-html-publish-to-html from ox-html.el adapted to org-ref
;; Instead of org-export-to-file calls org-ref-export-to-file-nomarks-noopen
(defun org-ref-html-publish-to-html (plist filename pub-dir)
  (unless (or (not pub-dir) (file-exists-p pub-dir)) (make-directory pub-dir t))
  ;; Check if a buffer visiting FILENAME is already open.
  (let* ((org-inhibit-startup t)
     (visiting (find-buffer-visiting filename))
     (work-buffer (or visiting (find-file-noselect filename))))
    (unwind-protect
      (with-current-buffer work-buffer
        (let ((output (org-export-output-file-name ".html" nil pub-dir)))
          (org-ref-export-to-file-nomarks-noopen 'html output
            nil nil nil (plist-get plist :body-only)
            (org-combine-plists
             plist
             `(:crossrefs
               ,(org-publish-cache-get-file-property
                 ;; Normalize file names in cache.
                 (file-truename filename) :crossrefs nil t)
               :filter-final-output
               (org-publish--store-crossrefs
                org-publish-collect-index
                ,@(plist-get plist :filter-final-output))))))))))

(require 'ox-publish)
(setq org-publish-project-alist
      '(
	("website-entries"
	:base-directory "~/website"
	:base-extension "org"
	:publishing-directory "~/website_public"
	:recursive t
	:publishing-function org-ref-html-publish-to-html ;; as defined above
	:headline-levels 4
	:auto-preamble t
	:html-head "<link rel=\"stylesheet\" type=\"text/css\" href=\"css/style.css\" />")
	("website-static"
	 :base-directory "~/website"
	 :base-extension "css\\|js\\|png\\|jpg\\|gif\\|pdf\\|mp3\\|ogg\\|swf"
	 :publishing-directory "~/website_public/"
	 :recursive t
	 :publishing-function org-publish-attachment
	 :html-head "<link rel=\"stylesheet\" type=\"text/css\" href=\"css/style.css\" />")
	("website" :components ("website-entries" "website-static"))
	))


(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(TeX-command-list
   '(("TeX" "%(PDF)%(tex) %(file-line-error) %`%(extraopts) %S%(PDFout)%(mode)%' %(output-dir) %t" TeX-run-TeX nil
      (plain-tex-mode texinfo-mode ams-tex-mode)
      :help "Run plain TeX")
     ("LaTeX" "%`%l%(mode)%' %T" TeX-run-TeX nil
      (latex-mode doctex-mode)
      :help "Run LaTeX")
     ("Makeinfo" "makeinfo %(extraopts) %(o-dir) %t" TeX-run-compile nil
      (texinfo-mode)
      :help "Run Makeinfo with Info output")
     ("Makeinfo HTML" "makeinfo %(extraopts) %(o-dir) --html %t" TeX-run-compile nil
      (texinfo-mode)
      :help "Run Makeinfo with HTML output")
     ("AmSTeX" "amstex %(PDFout) %`%(extraopts) %S%(mode)%' %(output-dir) %t" TeX-run-TeX nil
      (ams-tex-mode)
      :help "Run AMSTeX")
     ("ConTeXt" "context %t --run" TeX-run-interactive nil
      (context-mode)
      :help "Run ConTeXt once")
     ("ConTeXt Full" "%(cntxcom) %(extraopts) %(execopts)%t" TeX-run-TeX nil
      (context-mode)
      :help "Run ConTeXt until completion")
     ("BibTeX" "bibtex %(O?aux)" TeX-run-BibTeX nil
      (plain-tex-mode latex-mode doctex-mode context-mode texinfo-mode ams-tex-mode)
      :help "Run BibTeX")
     ("Biber" "biber %(output-dir) %s" TeX-run-Biber nil
      (plain-tex-mode latex-mode doctex-mode texinfo-mode ams-tex-mode)
      :help "Run Biber")
     ("Texindex" "texindex %s.??" TeX-run-command nil
      (texinfo-mode)
      :help "Run Texindex")
     ("Texi2dvi" "%(PDF)texi2dvi %t" TeX-run-command nil
      (texinfo-mode)
      :help "Run Texi2dvi or Texi2pdf")
     ("View" "%V" TeX-run-discard-or-function t t :help "Run Viewer")
     ("Print" "%p" TeX-run-command t t :help "Print the file")
     ("Queue" "%q" TeX-run-background nil t :help "View the printer queue" :visible TeX-queue-command)
     ("File" "%(o?)dvips %d -o %f " TeX-run-dvips t
      (plain-tex-mode latex-mode doctex-mode texinfo-mode ams-tex-mode)
      :help "Generate PostScript file")
     ("Dvips" "%(o?)dvips %d -o %f " TeX-run-dvips nil
      (plain-tex-mode latex-mode doctex-mode texinfo-mode ams-tex-mode)
      :help "Convert DVI file to PostScript")
     ("Dvipdfmx" "dvipdfmx -o %(O?pdf) %d" TeX-run-dvipdfmx nil
      (plain-tex-mode latex-mode doctex-mode texinfo-mode ams-tex-mode)
      :help "Convert DVI file to PDF with dvipdfmx")
     ("Ps2pdf" "ps2pdf %f %(O?pdf)" TeX-run-ps2pdf nil
      (plain-tex-mode latex-mode doctex-mode texinfo-mode ams-tex-mode)
      :help "Convert PostScript file to PDF")
     ("Glossaries" "makeglossaries %(d-dir) %s" TeX-run-command nil
      (plain-tex-mode latex-mode doctex-mode texinfo-mode ams-tex-mode)
      :help "Run makeglossaries to create glossary file")
     ("Index" "makeindex %(O?idx)" TeX-run-index nil
      (plain-tex-mode latex-mode doctex-mode texinfo-mode ams-tex-mode)
      :help "Run makeindex to create index file")
     ("upMendex" "upmendex %(O?idx)" TeX-run-index t
      (plain-tex-mode latex-mode doctex-mode texinfo-mode ams-tex-mode)
      :help "Run upmendex to create index file")
     ("Xindy" "texindy %s" TeX-run-command nil
      (plain-tex-mode latex-mode doctex-mode texinfo-mode ams-tex-mode)
      :help "Run xindy to create index file")
     ("Check" "lacheck %s" TeX-run-compile nil
      (latex-mode)
      :help "Check LaTeX file for correctness")
     ("ChkTeX" "chktex -v6 %s" TeX-run-compile nil
      (latex-mode)
      :help "Check LaTeX file for common mistakes")
     ("Spell" "(TeX-ispell-document \"\")" TeX-run-function nil t :help "Spell-check the document")
     ("Clean" "TeX-clean" TeX-run-function nil t :help "Delete generated intermediate files")
     ("Clean All" "(TeX-clean t)" TeX-run-function nil t :help "Delete generated intermediate and output files")
     ("Other" "" TeX-run-command t t :help "Run an arbitrary command")))
 '(TeX-parse-self t)
 '(backup-by-copying-when-linked t)
 '(browse-url-browser-function 'browse-url-generic)
 '(browse-url-generic-program "brave-browser")
 '(custom-enabled-themes '(tango-dark))
 '(display-battery-mode t)
 '(elpy-shell-echo-input nil)
 '(flymake-start-on-flymake-mode t)
 '(fringe-mode '(4 . 4) nil (fringe))
 '(global-display-line-numbers-mode nil)
 '(global-visual-line-mode t)
 '(inhibit-startup-screen t)
 '(org-export-with-toc nil)
 '(org-html-postamble nil)
 '(org-image-actual-width 720)
 '(org-startup-with-inline-images nil)
 '(package-archives
   '(("gnu" . "https://elpa.gnu.org/packages/")
     ("melpa" . "https://melpa.org/packages/")))
 '(python-shell-interpreter "python3")
 '(scroll-bar-mode nil)
 '(show-paren-mode t)
 '(tex-default-mode 'context-mode)
 '(tool-bar-mode nil)
 '(tooltip-mode nil)
 '(transient-mark-mode nil)
 '(visible-bell t))
(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 )
(put 'dired-find-alternate-file 'disabled nil)
